
(in-package #:veq-tests)

(plan 2)

(subtest "segx" (veq:fvprogn

  (is (veq:mvb (x s) (veq:f2segx (veq:f2rep 1.1f0) (veq:f2 11f0 12.3f0)
                                 (veq:f2 0.1f0 10f0) (veq:f2 8f0 -1.1f0))
               (list x s))
      '(t 0.2984826334627212f0))

  (is (veq:f2segx (veq:f2 0f0 0f0) (veq:f2 100f0 0f0) (veq:f2 0f0 1f0) (veq:f2 100f0 1f0)) nil)
  (is (veq:f2segx (veq:f2 0f0 0f0) (veq:f2 1f0 1f0) (veq:f2 0f0 1f0) (veq:f2 1f0 0f0)) t)

    (is (veq:lst (veq:f3planex 0f0 0f0 1f0 0f0 0f0 0f0
                               1f0 1f0 -1f0 1f0 1f0 1f0))
        '(t 0.5 1f0 1f0 0f0))

    (is (veq:f2in-triangle -1f0 -1f0 0f0 1f0 1f0 -1f0 0.1f0 -0.23f0) t)
    (is (veq:f2in-triangle -1f0 -1f0 0f0 1f0 1f0 -1f0 10.1f0 -0.23f0) nil)

  (let ((lines #((171.65283402050164f0  440.93255770900925f0 741.8656230212274f0 500.5731525084898f0)
                 (419.2018008481497f0 414.82076547119027f0 231.8129657641091f0 432.9209704173471f0)
                 (759.3100984542136f0 683.0572688408785f0 186.78312653996636f0 619.826955848491f0)
                 (207.3487871315644f0 423.4641291347193f0 572.5946942446438f0 615.4467255272378f0)
                 (711.763693083491f0 758.0848939089993f0 459.2986854439291f0 346.83449422454197f0)
                 (265.3344135246598f0 207.99967467598123f0 310.4842546275027f0 335.82329421968967f0)
                 (802.4973311106501f0 409.70738975628706f0 434.1851185215588f0 517.2401499837753f0)
                 (434.1851185215588f0 517.2401499837753f0 212.81495034634577f0 595.0765635282548f0)
                 (212.81495034634577f0 595.0765635282548f0 534.7714916499588f0 835.0868260231018f0)
                 (534.7714916499588f0 835.0868260231018f0 829.0282695332805f0 661.0107297445226f0)
                 (829.0282695332805f0 661.0107297445226f0 303.64388839183994f0 341.3925228044966f0)
                 (-250.5123166337458f0 -94.37721145333352f0 -228.09104043643808f0 -83.28631005497442f0)
                 (-390.63856869263486f0 -18.767200281988693f0 -362.24168246043087f0 -24.284515874982528f0)
                 (43.8599536524796f0 355.62019599604906f0 35.84958638173774f0 315.5535786322419f0)
                 (-219.7604274076626f0 68.60494549926393f0 -205.85946598681753f0 79.85598143394662f0)
                 (61.768527387278645f0 -203.25895028554947f0 99.92784427171932f0 -172.27011340884923f0)
                 (-117.32216116994307f0 -3.7842875742150794f0 -136.2033645477127f0 2.7374756681442522f0))))

    (is (veq:f2lsegx
          (map 'vector (lambda (ll) (veq:f$~ (4) (veq:from-lst ll))) lines))
        #(((4 . 0.64732474) (6 . 0.67643946) (10 . 0.6260663) (3 . 0.15091406)) NIL
          ((4 . 0.17538664) (8 . 0.8785489)) ((7 . 0.5416054) (0 . 0.13787198))
          ((9 . 0.049416218) (0 . 0.6773136) (2 . 0.20940378) (10 . 0.6536142) (6 . 0.6637384))
          NIL
          ((4 . 0.7013191) (0 . 0.66554976) (10 . 0.7091861))
          ((3 . 0.1310799)) ((2 . 0.13511844)) ((4 . 0.55909103))
          ((4 . 0.5372815) (6 . 0.54766154) (0 . 0.5717421))
          NIL NIL NIL NIL NIL NIL) :test #'equalp)

    (let* ((res #((-1.7981771 4.5993166 4.1450343 -1.7893275)
                  (2.0677722 1.118759 -2.0437524 1.9169904)
                  (-2.4936714 -1.2170556 0.8086343 -1.7898945)
                  (-0.3746919 2.1544874 2.20944 3.408476)
                  (1.2731494 -2.3085504 0.27102903 -4.281815)
                  (0.9941497 3.675606 -1.8864927 -3.0491135)
                  (-1.4914935 1.3933138 -2.1119807 0.83488333)
                  (-0.18533592 0.37096262 -1.2901927 0.7688844)
                  (1.2599827 1.1537284 1.4874907 4.2239804)
                  (2.5321753 -2.588292 0.83970135 -0.43850952)
                  (1.9361619 2.2650766 0.46414265 3.2302244))))
  (is (veq:f2ssegx (map 'vector (lambda (ll) (veq:f$~ (4) (veq:from-lst ll))) res) 1)
      #(((8 . 0.5163908) (3 . 0.33815444) (1 . 0.5215105) (5 . 0.36728722))
        ((0 . 0.18642762)) NIL ((0 . 0.22686073)) NIL ((0 . 0.21157123)) NIL NIL
        ((0 . 0.047732748)) NIL NIL) :test #'equalp)))))

(subtest "convex" (veq:fvprogn
  (veq:xlet ((f2!pt (veq:f2 1f0 2f0)))
    (is (veq:f2in-concave (f2!@$*. (veq::f12_@$fcos-sin (veq:f$lspace 10 0f0 veq:fpii)) 10f0)
                          pt)
        t))))

(unless (finalize) (error "error checks tests"))

